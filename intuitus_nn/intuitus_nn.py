# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from __future__ import absolute_import





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_intuitus_nn')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_intuitus_nn')
    _intuitus_nn = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_intuitus_nn', [dirname(__file__)])
        except ImportError:
            import _intuitus_nn
            return _intuitus_nn
        if fp is not None:
            try:
                _mod = imp.load_module('_intuitus_nn', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _intuitus_nn = swig_import_helper()
    del swig_import_helper
else:
    import _intuitus_nn
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

DRIVER_KEXT_NAME = _intuitus_nn.DRIVER_KEXT_NAME
LINUX_KERNEL_MODULE_PATH = _intuitus_nn.LINUX_KERNEL_MODULE_PATH
LINUX_ADD_KERNEL_MODULE_COMMAND = _intuitus_nn.LINUX_ADD_KERNEL_MODULE_COMMAND
LINUX_DEV_PATH = _intuitus_nn.LINUX_DEV_PATH
class Intuitus_intf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Intuitus_intf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Intuitus_intf, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _intuitus_nn.new_Intuitus_intf()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _intuitus_nn.delete_Intuitus_intf
    __del__ = lambda self: None

    def self_test(self):
        return _intuitus_nn.Intuitus_intf_self_test(self)

    def print_network(self):
        return _intuitus_nn.Intuitus_intf_print_network(self)

    def print_layer(self, layer_id):
        return _intuitus_nn.Intuitus_intf_print_layer(self, layer_id)

    def input_layer(self, depth, height, length):
        return _intuitus_nn.Intuitus_intf_input_layer(self, depth, height, length)

    def output_layer(self, layer_id, src_layer_id):
        return _intuitus_nn.Intuitus_intf_output_layer(self, layer_id, src_layer_id)

    def conv2d(self, layer_id, layer_type, input_buffer_id, in_channel_cnt, out_height, out_width, out_channel_cnt, scattered_lines, tile_tx_arr, tile_rx_arr, com_block, com_lengths):
        return _intuitus_nn.Intuitus_intf_conv2d(self, layer_id, layer_type, input_buffer_id, in_channel_cnt, out_height, out_width, out_channel_cnt, scattered_lines, tile_tx_arr, tile_rx_arr, com_block, com_lengths)

    def concat(self, concat_layer_id, layer_1_id, layer_2_id):
        return _intuitus_nn.Intuitus_intf_concat(self, concat_layer_id, layer_1_id, layer_2_id)

    def split(self, split_layer_id, in_layer_id, groups):
        return _intuitus_nn.Intuitus_intf_split(self, split_layer_id, in_layer_id, groups)

    def upsample(self, upsample_layer_id, in_buffer_id, in_channel_cnt, out_height, out_width):
        return _intuitus_nn.Intuitus_intf_upsample(self, upsample_layer_id, in_buffer_id, in_channel_cnt, out_height, out_width)

    def maxpool2d(self, maxpool_layer_id, in_buffer_id, in_channel_cnt, out_height, out_width, stride):
        return _intuitus_nn.Intuitus_intf_maxpool2d(self, maxpool_layer_id, in_buffer_id, in_channel_cnt, out_height, out_width, stride)

    def copy(self, copy_layer_id, in_buffer_id, in_channel_cnt, out_height, out_width):
        return _intuitus_nn.Intuitus_intf_copy(self, copy_layer_id, in_buffer_id, in_channel_cnt, out_height, out_width)

    def execute(self, fmap_in):
        return _intuitus_nn.Intuitus_intf_execute(self, fmap_in)

    def float8_to_float32(self, fmap_in):
        return _intuitus_nn.Intuitus_intf_float8_to_float32(self, fmap_in)
Intuitus_intf_swigregister = _intuitus_nn.Intuitus_intf_swigregister
Intuitus_intf_swigregister(Intuitus_intf)

class Framebuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Framebuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Framebuffer, name)
    __repr__ = _swig_repr

    def __init__(self, dev):
        this = _intuitus_nn.new_Framebuffer(dev)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _intuitus_nn.delete_Framebuffer
    __del__ = lambda self: None

    def show(self, img_ptr, offs):
        return _intuitus_nn.Framebuffer_show(self, img_ptr, offs)

    def close_tty(self):
        return _intuitus_nn.Framebuffer_close_tty(self)

    def get_screensize(self):
        return _intuitus_nn.Framebuffer_get_screensize(self)
Framebuffer_swigregister = _intuitus_nn.Framebuffer_swigregister
Framebuffer_swigregister(Framebuffer)

FMT_NUM_PLANES = _intuitus_nn.FMT_NUM_PLANES
WIDTH = _intuitus_nn.WIDTH
HEIGHT = _intuitus_nn.HEIGHT
MEDIA_INIT_OV5640 = _intuitus_nn.MEDIA_INIT_OV5640
MEDIA_INIT_MIPI_CSI_SUBMODULE = _intuitus_nn.MEDIA_INIT_MIPI_CSI_SUBMODULE
class buffer_addr_struct_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, buffer_addr_struct_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, buffer_addr_struct_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _intuitus_nn.buffer_addr_struct_t_start_set
    __swig_getmethods__["start"] = _intuitus_nn.buffer_addr_struct_t_start_get
    if _newclass:
        start = _swig_property(_intuitus_nn.buffer_addr_struct_t_start_get, _intuitus_nn.buffer_addr_struct_t_start_set)
    __swig_setmethods__["length"] = _intuitus_nn.buffer_addr_struct_t_length_set
    __swig_getmethods__["length"] = _intuitus_nn.buffer_addr_struct_t_length_get
    if _newclass:
        length = _swig_property(_intuitus_nn.buffer_addr_struct_t_length_get, _intuitus_nn.buffer_addr_struct_t_length_set)

    def __init__(self):
        this = _intuitus_nn.new_buffer_addr_struct_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _intuitus_nn.delete_buffer_addr_struct_t
    __del__ = lambda self: None
buffer_addr_struct_t_swigregister = _intuitus_nn.buffer_addr_struct_t_swigregister
buffer_addr_struct_t_swigregister(buffer_addr_struct_t)

class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["camdata"] = _intuitus_nn.Camera_camdata_set
    __swig_getmethods__["camdata"] = _intuitus_nn.Camera_camdata_get
    if _newclass:
        camdata = _swig_property(_intuitus_nn.Camera_camdata_get, _intuitus_nn.Camera_camdata_set)

    def __init__(self, dev):
        this = _intuitus_nn.new_Camera(dev)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _intuitus_nn.delete_Camera
    __del__ = lambda self: None

    def capture(self):
        return _intuitus_nn.Camera_capture(self)
Camera_swigregister = _intuitus_nn.Camera_swigregister
Camera_swigregister(Camera)

# This file is compatible with both classic and new-style classes.


